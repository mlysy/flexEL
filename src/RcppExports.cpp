// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// MeanReg_evalG
Eigen::MatrixXd MeanReg_evalG(Eigen::VectorXd y, Eigen::MatrixXd X, Eigen::VectorXd beta);
RcppExport SEXP _flexEL_MeanReg_evalG(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(MeanReg_evalG(y, X, beta));
    return rcpp_result_gen;
END_RCPP
}
// MeanRegLS_EvalG
Eigen::MatrixXd MeanRegLS_EvalG(Eigen::VectorXd y, Eigen::MatrixXd X, Eigen::MatrixXd Z, Eigen::VectorXd beta, Eigen::VectorXd gamma, double sig2);
RcppExport SEXP _flexEL_MeanRegLS_EvalG(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP sig2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    rcpp_result_gen = Rcpp::wrap(MeanRegLS_EvalG(y, X, Z, beta, gamma, sig2));
    return rcpp_result_gen;
END_RCPP
}
// QuantRegEvalG
Eigen::MatrixXd QuantRegEvalG(Eigen::VectorXd y, Eigen::MatrixXd X, Eigen::VectorXd tauArr, Eigen::VectorXd beta);
RcppExport SEXP _flexEL_QuantRegEvalG(SEXP ySEXP, SEXP XSEXP, SEXP tauArrSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tauArr(tauArrSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(QuantRegEvalG(y, X, tauArr, beta));
    return rcpp_result_gen;
END_RCPP
}
// QuantRegLSEvalG
Eigen::MatrixXd QuantRegLSEvalG(Eigen::VectorXd y, Eigen::MatrixXd X, Eigen::MatrixXd Z, Eigen::VectorXd tauArr, Eigen::VectorXd beta, Eigen::VectorXd gamma, double sig2, Eigen::VectorXd Nu);
RcppExport SEXP _flexEL_QuantRegLSEvalG(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP tauArrSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP sig2SEXP, SEXP NuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tauArr(tauArrSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Nu(NuSEXP);
    rcpp_result_gen = Rcpp::wrap(QuantRegLSEvalG(y, X, Z, tauArr, beta, gamma, sig2, Nu));
    return rcpp_result_gen;
END_RCPP
}
// QuantRegLSEvalGSmooth
Eigen::MatrixXd QuantRegLSEvalGSmooth(Eigen::VectorXd y, Eigen::MatrixXd X, Eigen::MatrixXd Z, Eigen::VectorXd tauArr, Eigen::VectorXd beta, Eigen::VectorXd gamma, double sig2, Eigen::VectorXd Nu, double s);
RcppExport SEXP _flexEL_QuantRegLSEvalGSmooth(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP tauArrSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP sig2SEXP, SEXP NuSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tauArr(tauArrSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Nu(NuSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(QuantRegLSEvalGSmooth(y, X, Z, tauArr, beta, gamma, sig2, Nu, s));
    return rcpp_result_gen;
END_RCPP
}
// adjG
Eigen::MatrixXd adjG(Eigen::MatrixXd G, double a);
RcppExport SEXP _flexEL_adjG(SEXP GSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(adjG(G, a));
    return rcpp_result_gen;
END_RCPP
}
// LambdaNR
Eigen::VectorXd LambdaNR(Eigen::MatrixXd G, int max_iter, double rel_tol, bool support, bool verbose);
RcppExport SEXP _flexEL_LambdaNR(SEXP GSEXP, SEXP max_iterSEXP, SEXP rel_tolSEXP, SEXP supportSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type support(supportSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(LambdaNR(G, max_iter, rel_tol, support, verbose));
    return rcpp_result_gen;
END_RCPP
}
// OmegaHat
Eigen::VectorXd OmegaHat(Eigen::MatrixXd G, Eigen::VectorXd lambda, bool support);
RcppExport SEXP _flexEL_OmegaHat(SEXP GSEXP, SEXP lambdaSEXP, SEXP supportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type support(supportSEXP);
    rcpp_result_gen = Rcpp::wrap(OmegaHat(G, lambda, support));
    return rcpp_result_gen;
END_RCPP
}
// LogEL
double LogEL(Eigen::VectorXd omegas, bool support);
RcppExport SEXP _flexEL_LogEL(SEXP omegasSEXP, SEXP supportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type omegas(omegasSEXP);
    Rcpp::traits::input_parameter< bool >::type support(supportSEXP);
    rcpp_result_gen = Rcpp::wrap(LogEL(omegas, support));
    return rcpp_result_gen;
END_RCPP
}
// EvalWeights
Eigen::VectorXd EvalWeights(Eigen::VectorXd deltas, Eigen::VectorXd omegas, Eigen::VectorXd epsilons, bool support);
RcppExport SEXP _flexEL_EvalWeights(SEXP deltasSEXP, SEXP omegasSEXP, SEXP epsilonsSEXP, SEXP supportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type deltas(deltasSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type omegas(omegasSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type epsilons(epsilonsSEXP);
    Rcpp::traits::input_parameter< bool >::type support(supportSEXP);
    rcpp_result_gen = Rcpp::wrap(EvalWeights(deltas, omegas, epsilons, support));
    return rcpp_result_gen;
END_RCPP
}
// LambdaNRC
Eigen::VectorXd LambdaNRC(Eigen::MatrixXd G, Eigen::VectorXd weights, int max_iter, double rel_tol, bool support, bool verbose);
RcppExport SEXP _flexEL_LambdaNRC(SEXP GSEXP, SEXP weightsSEXP, SEXP max_iterSEXP, SEXP rel_tolSEXP, SEXP supportSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type support(supportSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(LambdaNRC(G, weights, max_iter, rel_tol, support, verbose));
    return rcpp_result_gen;
END_RCPP
}
// OmegaHatEM
Eigen::VectorXd OmegaHatEM(Eigen::VectorXd omegas_init, Eigen::MatrixXd G, Eigen::VectorXd deltas, Eigen::VectorXd epsilons, int max_iter, double rel_tol, double abs_tol, bool support, bool verbose);
RcppExport SEXP _flexEL_OmegaHatEM(SEXP omegas_initSEXP, SEXP GSEXP, SEXP deltasSEXP, SEXP epsilonsSEXP, SEXP max_iterSEXP, SEXP rel_tolSEXP, SEXP abs_tolSEXP, SEXP supportSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type omegas_init(omegas_initSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type deltas(deltasSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type epsilons(epsilonsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< double >::type abs_tol(abs_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type support(supportSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(OmegaHatEM(omegas_init, G, deltas, epsilons, max_iter, rel_tol, abs_tol, support, verbose));
    return rcpp_result_gen;
END_RCPP
}
// LogELC
double LogELC(Eigen::VectorXd omegas, Eigen::VectorXd epsilons, Eigen::VectorXd deltas, bool support);
RcppExport SEXP _flexEL_LogELC(SEXP omegasSEXP, SEXP epsilonsSEXP, SEXP deltasSEXP, SEXP supportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type omegas(omegasSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type epsilons(epsilonsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type deltas(deltasSEXP);
    Rcpp::traits::input_parameter< bool >::type support(supportSEXP);
    rcpp_result_gen = Rcpp::wrap(LogELC(omegas, epsilons, deltas, support));
    return rcpp_result_gen;
END_RCPP
}
// LogELSmooth
double LogELSmooth(Eigen::VectorXd omegas, Eigen::VectorXd epsilons, Eigen::VectorXd deltas, double s, bool support);
RcppExport SEXP _flexEL_LogELSmooth(SEXP omegasSEXP, SEXP epsilonsSEXP, SEXP deltasSEXP, SEXP sSEXP, SEXP supportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type omegas(omegasSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type epsilons(epsilonsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type deltas(deltasSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< bool >::type support(supportSEXP);
    rcpp_result_gen = Rcpp::wrap(LogELSmooth(omegas, epsilons, deltas, s, support));
    return rcpp_result_gen;
END_RCPP
}
// EvalWeightsSmooth
Eigen::VectorXd EvalWeightsSmooth(Eigen::VectorXd deltas, Eigen::VectorXd omegas, Eigen::VectorXd epsilons, double s, bool support);
RcppExport SEXP _flexEL_EvalWeightsSmooth(SEXP deltasSEXP, SEXP omegasSEXP, SEXP epsilonsSEXP, SEXP sSEXP, SEXP supportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type deltas(deltasSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type omegas(omegasSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type epsilons(epsilonsSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< bool >::type support(supportSEXP);
    rcpp_result_gen = Rcpp::wrap(EvalWeightsSmooth(deltas, omegas, epsilons, s, support));
    return rcpp_result_gen;
END_RCPP
}
// OmegaHatEMSmooth
Eigen::VectorXd OmegaHatEMSmooth(Eigen::VectorXd omegas_init, Eigen::MatrixXd G, Eigen::VectorXd deltas, Eigen::VectorXd epsilons, double s, int max_iter, double rel_tol, double abs_tol, bool support, bool verbose);
RcppExport SEXP _flexEL_OmegaHatEMSmooth(SEXP omegas_initSEXP, SEXP GSEXP, SEXP deltasSEXP, SEXP epsilonsSEXP, SEXP sSEXP, SEXP max_iterSEXP, SEXP rel_tolSEXP, SEXP abs_tolSEXP, SEXP supportSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type omegas_init(omegas_initSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type deltas(deltasSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type epsilons(epsilonsSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< double >::type abs_tol(abs_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type support(supportSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(OmegaHatEMSmooth(omegas_init, G, deltas, epsilons, s, max_iter, rel_tol, abs_tol, support, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flexEL_MeanReg_evalG", (DL_FUNC) &_flexEL_MeanReg_evalG, 3},
    {"_flexEL_MeanRegLS_EvalG", (DL_FUNC) &_flexEL_MeanRegLS_EvalG, 6},
    {"_flexEL_QuantRegEvalG", (DL_FUNC) &_flexEL_QuantRegEvalG, 4},
    {"_flexEL_QuantRegLSEvalG", (DL_FUNC) &_flexEL_QuantRegLSEvalG, 8},
    {"_flexEL_QuantRegLSEvalGSmooth", (DL_FUNC) &_flexEL_QuantRegLSEvalGSmooth, 9},
    {"_flexEL_adjG", (DL_FUNC) &_flexEL_adjG, 2},
    {"_flexEL_LambdaNR", (DL_FUNC) &_flexEL_LambdaNR, 5},
    {"_flexEL_OmegaHat", (DL_FUNC) &_flexEL_OmegaHat, 3},
    {"_flexEL_LogEL", (DL_FUNC) &_flexEL_LogEL, 2},
    {"_flexEL_EvalWeights", (DL_FUNC) &_flexEL_EvalWeights, 4},
    {"_flexEL_LambdaNRC", (DL_FUNC) &_flexEL_LambdaNRC, 6},
    {"_flexEL_OmegaHatEM", (DL_FUNC) &_flexEL_OmegaHatEM, 9},
    {"_flexEL_LogELC", (DL_FUNC) &_flexEL_LogELC, 4},
    {"_flexEL_LogELSmooth", (DL_FUNC) &_flexEL_LogELSmooth, 5},
    {"_flexEL_EvalWeightsSmooth", (DL_FUNC) &_flexEL_EvalWeightsSmooth, 5},
    {"_flexEL_OmegaHatEMSmooth", (DL_FUNC) &_flexEL_OmegaHatEMSmooth, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_flexEL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
